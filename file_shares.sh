#!/bin/bash

# creds == DOM/user%password

# JoSko 06/26/2017

EXPECTED_ARGS=2
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: ./`basename $0` targets creds"
  echo "Redirect this output somewhere, its goina be YUUUUUUUGE"
  exit 1
fi

if [[ $(which mount.cifs > /dev/null; echo $?) == "1" ]] ; then
	echo "You dont have mount.cifs installed, install the cifs-utils package"
	exit 1
fi

targets=$1
creds=$2

# Specify the regex to search with in each share
REGEX='passw'

# colors
RED='\033[0;31m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

user="$(printf '%s' "$creds" | cut -d '/' -f2 | cut -d '%' -f1)"
dom="$(printf '%s' "$creds" | cut -d '/' -f1)"
pass="$(printf '%s' "$creds" | cut -d '/' -f2 | cut -d '%' -f2-)"

# setting a static mounting point and creating the directory
mountpoint="/mnt/file_shares/mount"
mkdir -p "$mountpoint"

echo -e "[*] Targets: $targets"
echo -e "[*] User: $dom/$user\n"

for h in $(< $targets); do
	# connect to the host, if no Disks are reported, print the error instead and move on
	smb=$(smbclient -U $creds -g -L //$h 2>&1)
	if ! [[ $smb =~ "Disk" ]]; then
		echo -e "${RED}[*] Host: $h - $(echo $smb | awk '{print $NF}')${NC}"
	else
		echo -e "${BLUE}[*] Host: $h${NC}";
		# get a list of shares for each host from the smbclient output
		for s in $(echo "$smb" | grep "Disk" | cut -d '|' -f2); do
			# skip shares known to be too large and used for application logs (SYSVOL and NETLOGON are AD restricted)
			if [[ $s == "SYSVOL" ]] || \
			   [[ $s == "NETLOGON" ]];
			then
				echo -e "${YELLOW}[+] Skipping: //${h}/${s}${NC}"
			else
				# mount the share, wait half a second, then search
				mount.cifs "//${h}/${s}" "$mountpoint" -o user="$user",dom="$dom",pass="$pass" 2> /dev/null
				if [[ $? == "0" ]]; then
					echo -e "${GREEN}[+] Mounted: //${h}/${s} at $(date)${NC}"
					sleep .5
					cd "$mountpoint"
					# search for passw on any file with the included extension, and limit each resulting line to 300 characters
					grep --color=always -r -I --include=*.{xls,csv,txt,xml,conf,config,cmd,reg,bat,ps1,psm,vbs,ini,py,rb,pl,sh,bak} -i $REGEX * | cut -c1-300
					echo -e "[+] Done searching, unmounting"
					cd "/mnt/file_shares/"
					umount "$mountpoint"
				else
					echo -e "${YELLOW}[-] Mounting //${h}/${s} failed${NC}"
				fi
			fi
		done
	fi
done
