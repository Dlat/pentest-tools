#!/usr/bin/env ruby

#JoSko - 12.05.2016

=begin
Pull and decode F5 BIG-IP Cookie

Feed me cookie, and I give you IP address... om.. nom.. nom..

Assumes HTTPS on 443 only. Change the code if you need SSL on another port.
=end

require 'net/https'  # built-in, no need to install

#Function for converting hex IPv6 string to standard notation
def ipv6_convert(ip)
  #Break into two-byte chunks and join with ":" per standard IPv6 notation
  internal_ip = ip.scan(/..../).join(":")
  loop do
    break if internal_ip.sub!(/\A0000:0000:0000:0000:0000:0000:0000:0000\z/, '::')
    break if internal_ip.sub!(/\b0000:0000:0000:0000:0000:0000:0000:\b/, ':')
    break if internal_ip.sub!(/\b0000:0000:0000:0000:0000:0000:\b/, ':')
    break if internal_ip.sub!(/\b0000:0000:0000:0000:0000:\b/, ':')
    break if internal_ip.sub!(/\b0000:0000:0000:0000:\b/, ':')
    break if internal_ip.sub!(/\b0000:0000:0000:\b/, ':')
    break if internal_ip.sub!(/\b0000:0000:\b/, ':')
    break
  end
  return internal_ip
end

#Print help if no arguments supplied
if ARGV.empty?
  puts "./big-ip-decode.rb <HOST> <PORT>"
  exit
else
  host = ARGV[0]
  port = ARGV[1]

  #Setup http/https request
  http = Net::HTTP.new(host, port)
  if port == "443"
    uri = URI("https://#{host}:#{port}/")
    http.use_ssl = true 
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  else
    uri = URI("http://#{host}:#{port}/")
  end

  #Connect to target and read response
  begin
    request = Net::HTTP::Get.new(uri)
    response = http.request(request)
  rescue
    puts "Could not connect to #{uri}"
    exit
  end

  #Persistence cookie values
  cookie = /BIGipServer([^=]+)=([0-9]+)\.([0-9]+)\.[0-9]+/.match(response['Set-Cookie'])
  #IPv4 Pool Member in non-default route domain
  cookie2 = /BIGipServer([^=]+)=rd[0-9]o0{20}f{4}([0-9a-f]+)o([0-9]+)/.match(response['Set-Cookie'])
  #IPv6 Load balanced pool Member in non-default route domain
  cookie3 = /BIGipServer([^=]+)=vi([0-9a-f]+)\.([0-9]+)/.match(response['Set-Cookie'])
  #IPv6 Pool Member in non-default route domain
  cookie4 = /BIGipServer([^=]+)=rd[0-9]o([0-9a-f]+)o([0-9]+)/.match(response['Set-Cookie'])

  if !cookie.nil?
    #Perform Bitwise AND operation and right shift
    cookie_val = cookie
    octet1 = (cookie[2].to_i & 0x000000ff)
    octet2 = (cookie[2].to_i & 0x0000ffff) >> 8
    octet3 = (cookie[2].to_i & 0x00ffffff) >> 16
    octet4 = cookie[2].to_i >> 24
    internal_ip = "#{octet1}.#{octet2}.#{octet3}.#{octet4}"
    port = (cookie[3].to_i & 0x00ff) * 256 + (cookie[3].to_i >> 8)
  elsif !cookie2.nil?
    #Take hex value and print as dotted decimal
    cookie_val = cookie2
    octets = cookie2[2].scan(/../)
    internal_ip = "#{octets[0].to_i(16)}.#{octets[1].to_i(16)}.#{octets[2].to_i(16)}.#{octets[3].to_i(16)}"
    port = cookie2[3]
  elsif !cookie3.nil?
    #Take IPv6 hex and print in standard notation. Convert port from 16 bit value to decimal
    cookie_val = cookie3
    internal_ip = ipv6_convert(cookie3[2])
    port = (cookie3[3].to_i & 0x00ff) * 256 + (cookie3[3].to_i >> 8)
  elsif !cookie4.nil?
    #Take IPv6 hex and print in standard notation
    cookie_val = cookie4
    internal_ip = ipv6_convert(cookie4[2])
    port = cookie4[3]
  end
  
  if !cookie_val.nil?
    puts "\nFound BIGipServer Cookie at #{uri}"
    puts "Cookie: #{cookie_val}"
    puts "Internal IP: #{internal_ip}"
    puts "Port: #{port}"
  else
    puts "Did not find a BIGipServer Cookie at #{uri}"
  end
end