#!/usr/bin/env ruby
#
# List all findings from a Nessus XML output
#

require 'optparse'
require 'nokogiri'

# Parse command line options
x=nil
options = {}
optparse = OptionParser.new do |opts| 
	opts.banner = "Parses a Nessus XML output file and lists findings for each host sorted by CVSS. 
	\nUsage: nessus_list.rb [options]" # The banner to display at the top
	opts.on( '-f', '--file FILENAME', 'Nessus XML output file' ) do |file|
		options[:file] = file
	end
	opts.on( '-i', '--ignore', 'Ignore Info / no-CVSS findings' ) do |ignore|
		options[:ignore] = ignore
	end
	opts.on( '-h', '--help', 'Display this screen' ) do
		puts opts
		exit
	end
	x=opts
end.parse!(ARGV)

# If no options are specified, output help screen and exit
if options[:file].nil?
	puts x
	exit
end

# Open the file for reading
xml_file = File.read(options[:file])

doc = Nokogiri::XML(xml_file)

hosts = doc.xpath('//NessusClientData_v2/Report/ReportHost')
hosts.each do |host|
	findings = []
	puts "\nHost: "+host.at_xpath("@name")
	puts "CVSS\tProto\tPort\tName"
	puts "----\t-----\t----\t----"
	host.xpath('./ReportItem').each do |item|
		if item.at_xpath("cvss_base_score").nil?
			cvss = Nokogiri::XML::Node.new("cvss_base_score", doc)
			cvss.content = "-"
			item << cvss
		else
			cvss = item.at_xpath("cvss_base_score")
		end
		proto = item.at_xpath("@protocol")
		port = item.at_xpath("@port")
		plugin_name = item.at_xpath("plugin_name")
		unless cvss.text == "-" && options[:ignore]
			findings.push([cvss.text, proto.text, port.text, plugin_name.text])
		end
	end
	findings.sort_by!{ |a,b,c,d| a }
	findings.reverse.each do |finding|
		puts finding[0] + "\t" + finding[1] + "\t" + finding[2] + "\t" + finding[3]
	end
end

